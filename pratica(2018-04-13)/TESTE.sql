-- INSERE NA TABELA VENDASMES COD, NOME E TOTAL DE VENDAS DE UM VENDEDOR NO MES

-- Procedimento atualiza nome, mes e VALOR das vendas referente ao mes
-- de cada vendedor

-- CONSULTA SELECIONA COD E NOME DE VENDEDOR QUE ESTEJA DENTRO DA TABELA PEDIDO
/*
SELECT CODVEND, NOMEVEND
FROM VENDEDOR
WHERE CODVEND IN 
(SELECT CODVEND FROM PEDIDO
WHERE PEDIDO.CODVEND = VENDEDOR.CODVEND);
*/
-- AGRUPA O NUMERO DO PEDIDO E O VALOR TOTAL UNITARIO REFERENTE A ESSE PEDIDO
/*
SELECT DISTINCT VENDEDOR.NOMEVEND,
                EXTRACT(MONTH FROM PEDIDO.DATA) AS MES,
                SUM(PRODUTO.VALUNIT) AS TOTAL
FROM VENDEDOR INNER JOIN 
    (PEDIDO INNER JOIN 
    (ITEMPED INNER JOIN PRODUTO
    ON ITEMPED.CODPROD = PRODUTO.CODPROD)
    ON PEDIDO.NUMPED = ITEMPED.NUMPED)
    ON VENDEDOR.CODVEND = PEDIDO.CODVEND
    GROUP BY VENDEDOR.NOMEVEND,
             EXTRACT(MONTH FROM PEDIDO.DATA)
    ORDER BY EXTRACT(MONTH FROM PEDIDO.DATA);


CREATE OR REPLACE PROCEDURE SP_ATUALIZA_VENDASMES
    (NOMEVEND IN VENDASMES.NOME_VEND%TYPE,
     MESVEND IN VENDASMES.MES_VEND%TYPE,
     TOTALMES IN VENDASMES.TOTAL_VEND%TYPE,
     DATA IN PEDIDO.DATA%TYPE) AS
BEGIN
    UPDATE VENDASMES
    SET NOME_VEND = NOMEVEND,
        MES_VEND = EXTRACT(MONTH FROM DATA),
        TOTAL_VEND = TOTALMES
    WHERE MES_VEND = EXTRACT(MONTH FROM DATA);
END SP_ATUALIZA_VENDASMES;


---
--ALTER TABLE CLIENTE ADD TOTALCOMPRAS FLOAT;
DESC CLIENTE;

CREATE OR REPLACE FUNCTION RETORNA_TOTAL_PED
    (CODCLIENTE CLIENTE.CODCLI%TYPE)
    RETURN FLOAT 
IS
    TOTALPEDIDOS FLOAT;
BEGIN
        SELECT SUM(PRODUTO.VALUNIT) INTO TOTALPEDIDOS
        FROM PRODUTO, ITEMPED
        WHERE PRODUTO.CODPROD = ITEMPED.CODPROD;
        RETURN TOTALPEDIDOS;
END;
*/

CREATE OR REPLACE FUNCTION INSERE_PEDIDO_ITEMPED
    (NUM_PED NUMBER,
    PRAZO_ENTR NUMBER,
    COD_CLI NUMBER,
    COD_VEND NUMBER,
    DATA_PED DATE,
    COD_PROD NUMBER,
    QUANT_ITEM NUMBER)
    RETURN VARCHAR2
IS
    COND BOOLEAN := FALSE;
    TEXT VARCHAR2(5) := 'OK';
BEGIN
    CASE NOT COND
    WHEN NUM_PED != NULL AND
         PRAZO_ENTR != NULL AND
         COD_CLI != NULL AND
         COD_VEND != NULL AND
         DATA_PED != NULL
    THEN
        INSERT INTO PEDIDO(NUMPED,PRAZOENTR,CODCLI,CODVEND,DATA)
        VALUES (NUM_PED,PRAZO_ENTR,COD_CLI,COD_VEND,DATA_PED);
    WHEN NUM_PED != NULL AND
         COD_PROD != NULL AND
         QUANT_ITEM != NULL
    THEN
        INSERT INTO ITEMPED(NUMPED,CODPROD,QUANT)
        VALUES (NUM_PED,COD_PROD,QUANT_ITEM);
    ELSE 
        DBMS_OUTPUT.PUT_LINE('Exception Message:'||SQLERRM);
        DBMS_OUTPUT.PUT_LINE('Linha: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
    END CASE;
RETURN TEXT;
END;





